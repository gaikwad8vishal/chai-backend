generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  ASSIGNED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}


enum UserRole {
  USER
  ADMIN
  DELIVERY_PERSON
}

model User {
  id        String  @id @default(uuid())
  username  String  @unique
  password  String  
  createdAt DateTime @default(now())
  role      UserRole @default(USER) 
  isAdmin   Boolean @default(false)
  isBlocked Boolean @default(false) 
  location  String?
  orders    Order[]  @relation("UserOrders") // No onDelete here
  cart      Cart?    @relation("UserCart") 
  ordersAssigned Order[] @relation(name: "DeliveryPersonOrders")
}
model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(name: "UserOrders", fields: [userId], references: [id], onDelete: Cascade) 
  items      OrderItem[] @relation("OrderItems") // No onDelete here

  totalPrice Float
  createdAt  DateTime    @default(now())
  status     OrderStatus @default(PENDING) 
  assignedTo String?
  deliveryPerson User? @relation(name: "DeliveryPersonOrders", fields: [assignedTo], references: [id])
}


model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation("OrderItems", fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  name      String
  quantity  Int
  price     Float
}
model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(name: "UserCart", fields: [userId], references: [id], onDelete: Cascade) 
  items     CartItem[] @relation("CartItems") // Fixed relation
  createdAt DateTime   @default(now())
}



model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(name: "CartItems", fields: [cartId], references: [id], onDelete: Cascade) // Fixed relation
  name      String
  quantity  Int
  price     Float
}


model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Float
  stock       Int      @default(0)
  imageUrl    String?  // Image for product (optional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
